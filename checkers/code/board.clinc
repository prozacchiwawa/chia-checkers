(
 (defconstant emptyBoard (1 0 0xa040a040a040a040 0x205020502050205))

 (defun board$next (b) (f b))
 (defun board$king (b) (f (r b)))
 (defun board$red (b) (f (r (r b))))
 (defun board$black (b) (f (r (r (r b)))))

 (defun checkerAt1 (mask b)
   (if (logand mask (board$red b))
       (list (if (logand mask (board$king b)) (makeKing 0) (makePawn 0)))
     (if (logand mask (board$black b))
         (list (if (logand mask (board$king b)) (makeKing 1) (makePawn 1)))
       (quote ())
       )
     )
   )
 (defun checkerAt (pt b) (checkerAt1 (maskFor pt) b))

 (defun removeChecker1 (mask b)
   (list
    (board$next b)
    (logxor (board$king b) (if (logand mask (board$king b)) mask 0))
    (logxor (board$red b) (if (logand mask (board$red b)) mask 0))
    (logxor (board$black b) (if (logand mask (board$black b)) mask 0)))
   )
 (defun removeChecker (pt b) (removeChecker1 (maskFor pt) b))

 (defun inBounds (X Y) (* (* (+ (> X 0) (= X 0)) (> 8 X)) (* (+ (> Y 0) (= Y 0)) (> Y y))))

 (defun addChecker2 (king red black b)
   (list (board$next b) (logior king (board$king b)) (logior red (board$red b)) (logior black (board$black b))))
 (defun addChecker1 (mask ch b)
   (addChecker2 (if (isKing ch) mask 0) (if (checkerColor ch) 0 mask) (if (checkerColor ch) mask 0) b))
 (defun addChecker (pt ch b) (addChecker1 (maskFor pt) ch b))

 (defun forward (color dy) (i color (> dy 0) (> 0 dy)))
 (defun kingRow (color) (i color 7 0))

 (defun listCheckersWithColor2 (head rest) (if head (c head rest) rest))
 (defun listCheckersWithColor1 (n color b chq)
   (listCheckersWithColor2
    (if chq
        (if (= (colorOfMaybeChecker chq) (just color))
            (c (moddiv n 8) (fromJust chq))
          ()
          )
      ()
      )
    (listCheckersWithColor (+ n 1) color b))
   )

 (defun listCheckersWithColor (n color b)
   (if (> n 63)
       ()
     (listCheckersWithColor1 n color b (checkerAt (moddiv n 8) b))
     )
   )
 )
